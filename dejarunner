#!/usr/bin/env tclsh

package require Tk

set progname "dejarunner"

if {![file exists site.exp]} {
  puts "$progname must be run in the testsuite build directory"
  exit 1
}

# This will define srcdir and tool.
source site.exp

if {[llength $argv] == 0} {
  set argv [list ${tool}.*/*.exp]
}
set all_files [lsort [glob -tails -directory $srcdir {*}${argv}]]

set ncpus [exec nproc]

tk appname $progname
wm withdraw .

toplevel .main -class $progname
wm geometry .main =1000x750
wm title .main $progname
wm iconname .main $progname
bind .main <Destroy> exit

ttk::labelframe .main.progress -text "Progress"
pack .main.progress -side top -fill both -padx 4 -pady 4

set jobs_completed 0
set jobs_running 0
ttk::progressbar .main.progress.bar -maximum [llength $all_files] \
  -mode determinate -variable jobs_completed
pack .main.progress.bar -side top -fill both -padx 4 -pady 4

ttk::labelframe .main.tasks -text "Current Tasks"
pack .main.tasks -side top -fill both -expand true -padx 4 -pady 4

for {set i 0} {$i < $ncpus} {incr i} {
  set job_state($i) ""
  set label [label .main.tasks.l$i -anchor w -textvariable job_state($i)]
  pack $label -side top -fill x -anchor w
}

ttk::labelframe .main.results -text "Results"
pack .main.results -side top -fill both -expand true -padx 4 -pady 4

# LOL.
set states {
  "expected passes"
  "unexpected failures"
  "expected failures"
  "known failures"
  "untested testcases"
  "unresolved testcases"
  "unsupported tests"
  "paths in test names"
  "duplicate test names"
}

set row 0
foreach state $states {
  set state_count($state) 0

  label .main.results.label$state -text $state -anchor w
  grid .main.results.label$state -sticky ne -column 0 -row $row

  label .main.results.num$state -textvariable state_count($state) -anchor e \
    -width 11
  grid .main.results.num$state -sticky nw -column 1 -row $row

  incr row
}

ttk::labelframe .main.buttons -text ""
pack .main.buttons -side top -fill x -padx 4 -pady 4

set go_button [button .main.buttons.go -text Go -command go]
pack .main.buttons.go -side top -padx 4 -pady 4

# job_groups(N,start) is the name of the function for this group.
# job_groups(N,list) is the list of jobs.
array set job_groups {}
set current_job_group 0

proc reset_job_groups {} {
  global job_groups current_job_group
  array set job_groups {}
  set current_job_group 0

  global jobs_completed jobs_running
  set jobs_completed 0
  set jobs_running 0
}

proc add_job_group {start_func job_list} {
  global job_groups
  set n [expr {[array size job_groups] / 2}]
  set job_groups($n,start) $start_func
  set job_groups($n,list) $job_list
}

proc start_next_job {jobno} {
  global job_groups current_job_group job_state jobs_running

  if {[llength $job_groups($current_job_group,list)] == 0} {
    # No more tasks in this group.
    set job_state($jobno) "DONE"
    if {$jobs_running == 0} {
      # Group is completely done, try the next one.
      incr current_job_group
      start_next_job_group
    }
  } else {
    set name [lindex $job_groups($current_job_group,list) 0]
    set job_groups($current_job_group,list) \
      [lreplace $job_groups($current_job_group,list) 0 0]

    set job_state($jobno) $name
    incr jobs_running
    $job_groups($current_job_group,start) $jobno $name
  }
}

proc job_finished {jobno} {
  global jobs_completed jobs_running
  incr jobs_completed
  incr jobs_running -1
  start_next_job $jobno
}

proc start_next_job_group {} {
  global current_job_group job_groups

  if {$current_job_group == [array size job_groups] / 2} {
    # All jobs groups have completed.
    re_enable_go_button
  } else {
    global ncpus
    for {set i 0} {$i < $ncpus} {incr i} {
      start_next_job $i
    }
  }
}

proc accept_output {jobno channel} {
  if {[chan gets $channel line] == -1} {
    # Might not really be EOF.
    if {[chan eof $channel]} {
      catch {chan close $channel}
      job_finished $jobno
    }
  } elseif {[regexp "^# of (\[a-z \]*\[a-z\])\[ \t\]+(\[0-9\]+)$" \
	       $line ignore name num]} {
    global state_count
    incr state_count($name) $num
  }
}

proc run_one_test {jobno expfile} {
  # EXPFILE is gdb.x/y.exp and we want outputs/gdb.x/y
  set outdir outputs/[file rootname $expfile]
  file mkdir $outdir

  set fd [open "| runtest GDB_PARALLEL=yes --outdir $outdir $expfile"]
  chan configure $fd -blocking 0 -buffering line
  chan event $fd readable [list accept_output $jobno $fd]
}


proc accept_output_noop {jobno channel} {
  if {[chan gets $channel line] == -1} {
    # Might not really be EOF.
    if {[chan eof $channel]} {
      catch {chan close $channel}
      job_finished $jobno
    }
  }
  # Just ignore the output.
}

# Find either gdb.sum or gdb.log files corresponding to $all_files.
proc find_sum_or_log {suffix} {
  global all_files
  set result {}
  foreach expfile $all_files {
    # EXPFILE is gdb.x/y.exp and we want outputs/gdb.x/y/gdb.suff
    set name outputs/[file rootname $expfile]/gdb.$suffix
    if {[file exists $name]} {
      lappend result $name
    }
  }
  return $result
}

proc run_one_post_task {jobno name} {
  global srcdir
  switch -- $name {
    "gdb.sum" {
      # The tee is lame but if we redirect here, Tcl won't let us
      # accept output.
      set cmdline "$srcdir/../../contrib/dg-extract-results.sh [find_sum_or_log sum] | tee gdb.sum"
    }
    "gdb.log" {
      set cmdline "$srcdir/../../contrib/dg-extract-results.sh -L [find_sum_or_log log] | tee gdb.log"    }
    "corefiles" {
      set cmdline $srcdir/lib/dg-add-core-file-count.sh
    }
  }

  set fd [open "| $cmdline"]
  chan configure $fd -blocking 0 -buffering line
  chan event $fd readable [list accept_output $jobno $fd]
}

proc go {} {
  global go_button state_count
  $go_button configure -state disabled

  foreach name [array names state_count] {
    set state_count($name) 0
  }

  reset_job_groups
  global all_files
  add_job_group run_one_test $all_files
  add_job_group run_one_post_task {gdb.sum gdb.log}
  add_job_group run_one_post_task corefiles

  start_next_job_group
}

proc re_enable_go_button {} {
  global go_button
  $go_button configure -state active
}
